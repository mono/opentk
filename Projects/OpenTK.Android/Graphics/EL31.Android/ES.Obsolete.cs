//
// The Open Toolkit Library License
//
// Copyright 2013 Xamarin Inc
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//



namespace OpenTK.Graphics.ES31
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573

    partial class GL
    {
        [Obsolete ("Use the overload with strongly typed enumerations")]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glActiveTexture")]
        public static 
        void ActiveTexture(OpenTK.Graphics.ES31.All texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ActiveTexture((OpenTK.Graphics.ES31.TextureUnit)texture);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindBuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindBuffer(OpenTK.Graphics.ES31.All target, Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindBuffer((OpenTK.Graphics.ES31.BufferTarget)target, (UInt32)buffer);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindBuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindBuffer(OpenTK.Graphics.ES31.All target, UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindBuffer((OpenTK.Graphics.ES31.BufferTarget)target, (UInt32)buffer);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindFramebuffer(OpenTK.Graphics.ES31.All target, Int32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindFramebuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (UInt32)framebuffer);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindFramebuffer(OpenTK.Graphics.ES31.All target, UInt32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindFramebuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (UInt32)framebuffer);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindRenderbuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindRenderbuffer(OpenTK.Graphics.ES31.All target, Int32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindRenderbuffer((OpenTK.Graphics.ES31.RenderbufferTarget)target, (UInt32)renderbuffer);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindRenderbuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindRenderbuffer(OpenTK.Graphics.ES31.All target, UInt32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindRenderbuffer((OpenTK.Graphics.ES31.RenderbufferTarget)target, (UInt32)renderbuffer);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindTexture")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindTexture(OpenTK.Graphics.ES31.All target, Int32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindTexture((OpenTK.Graphics.ES31.TextureTarget)target, (UInt32)texture);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindTexture")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindTexture(OpenTK.Graphics.ES31.All target, UInt32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindTexture((OpenTK.Graphics.ES31.TextureTarget)target, (UInt32)texture);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBlendEquation")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BlendEquation(OpenTK.Graphics.ES31.All mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BlendEquation((OpenTK.Graphics.ES31.BlendEquationMode)mode);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBlendEquationSeparate")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BlendEquationSeparate(OpenTK.Graphics.ES31.All modeRGB, OpenTK.Graphics.ES31.All modeAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BlendEquationSeparate((OpenTK.Graphics.ES31.BlendEquationMode)modeRGB, (OpenTK.Graphics.ES31.BlendEquationMode)modeAlpha);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBlendFunc")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BlendFunc(OpenTK.Graphics.ES31.All sfactor, OpenTK.Graphics.ES31.All dfactor)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BlendFunc((OpenTK.Graphics.ES31.BlendingFactorSrc)sfactor, (OpenTK.Graphics.ES31.BlendingFactorDest)dfactor);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBlendFuncSeparate")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BlendFuncSeparate(OpenTK.Graphics.ES31.All srcRGB, OpenTK.Graphics.ES31.All dstRGB, OpenTK.Graphics.ES31.All srcAlpha, OpenTK.Graphics.ES31.All dstAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BlendFuncSeparate((OpenTK.Graphics.ES31.BlendingFactorSrc)srcRGB, (OpenTK.Graphics.ES31.BlendingFactorDest)dstRGB, (OpenTK.Graphics.ES31.BlendingFactorSrc)srcAlpha, (OpenTK.Graphics.ES31.BlendingFactorDest)dstAlpha);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferData(OpenTK.Graphics.ES31.All target, IntPtr size, IntPtr data, OpenTK.Graphics.ES31.All usage)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BufferData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.ES31.BufferUsage)usage);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferData<T2>(OpenTK.Graphics.ES31.All target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES31.All usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.BufferData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ES31.BufferUsage)usage);
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferData<T2>(OpenTK.Graphics.ES31.All target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES31.All usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.BufferData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ES31.BufferUsage)usage);
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferData<T2>(OpenTK.Graphics.ES31.All target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES31.All usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.BufferData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ES31.BufferUsage)usage);
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferData<T2>(OpenTK.Graphics.ES31.All target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES31.All usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.BufferData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ES31.BufferUsage)usage);
                data = (T2)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferSubData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferSubData(OpenTK.Graphics.ES31.All target, IntPtr offset, IntPtr size, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BufferSubData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferSubData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferSubData<T3>(OpenTK.Graphics.ES31.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.BufferSubData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferSubData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferSubData<T3>(OpenTK.Graphics.ES31.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.BufferSubData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferSubData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferSubData<T3>(OpenTK.Graphics.ES31.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.BufferSubData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBufferSubData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BufferSubData<T3>(OpenTK.Graphics.ES31.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.BufferSubData((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T3)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCheckFramebufferStatus")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        OpenTK.Graphics.ES31.All CheckFramebufferStatus(OpenTK.Graphics.ES31.All target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return (All) Core.CheckFramebufferStatus((OpenTK.Graphics.ES31.FramebufferTarget)target);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage2D(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CompressedTexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage2D<T7>(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage2D<T7>(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage2D<T7>(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage2D<T7>(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T7)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage2D(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CompressedTexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T8)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCopyTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CopyTexImage2D(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CopyTexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCopyTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CopyTexSubImage2D(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CopyTexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCreateShader")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        Int32 CreateShader(OpenTK.Graphics.ES31.All type)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.CreateShader((OpenTK.Graphics.ES31.ShaderType)type);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCullFace")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CullFace(OpenTK.Graphics.ES31.All mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CullFace((OpenTK.Graphics.ES31.CullFaceMode)mode);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDepthFunc")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DepthFunc(OpenTK.Graphics.ES31.All func)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.DepthFunc((OpenTK.Graphics.ES31.DepthFunction)func);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDisable")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void Disable(OpenTK.Graphics.ES31.All cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.Disable((OpenTK.Graphics.ES31.EnableCap)cap);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawArrays")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawArrays(OpenTK.Graphics.ES31.All mode, Int32 first, Int32 count)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.DrawArrays((OpenTK.Graphics.ES31.BeginMode)mode, (Int32)first, (Int32)count);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElements(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, IntPtr indices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.DrawElements((OpenTK.Graphics.ES31.BeginMode)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElements<T3>(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawElements((OpenTK.Graphics.ES31.BeginMode)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElements<T3>(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawElements((OpenTK.Graphics.ES31.BeginMode)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElements<T3>(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawElements((OpenTK.Graphics.ES31.BeginMode)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElements<T3>(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawElements((OpenTK.Graphics.ES31.BeginMode)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glEnable")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void Enable(OpenTK.Graphics.ES31.All cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.Enable((OpenTK.Graphics.ES31.EnableCap)cap);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFramebufferRenderbuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void FramebufferRenderbuffer(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, OpenTK.Graphics.ES31.All renderbuffertarget, Int32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.FramebufferRenderbuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferSlot)attachment, (OpenTK.Graphics.ES31.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFramebufferRenderbuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void FramebufferRenderbuffer(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, OpenTK.Graphics.ES31.All renderbuffertarget, UInt32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.FramebufferRenderbuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferSlot)attachment, (OpenTK.Graphics.ES31.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFramebufferTexture2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void FramebufferTexture2D(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, OpenTK.Graphics.ES31.All textarget, Int32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.FramebufferTexture2D((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferSlot)attachment, (OpenTK.Graphics.ES31.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFramebufferTexture2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void FramebufferTexture2D(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, OpenTK.Graphics.ES31.All textarget, UInt32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.FramebufferTexture2D((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferSlot)attachment, (OpenTK.Graphics.ES31.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFrontFace")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void FrontFace(OpenTK.Graphics.ES31.All mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.FrontFace((OpenTK.Graphics.ES31.FrontFaceDirection)mode);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGenerateMipmap")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GenerateMipmap(OpenTK.Graphics.ES31.All target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GenerateMipmap((OpenTK.Graphics.ES31.TextureTarget)target);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveAttrib")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufsize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES31.All[] type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = type)
                {
                    Core.GetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.ActiveAttribType*)type_ptr, (StringBuilder)name);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveAttrib")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES31.All type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = &type)
                {
                    Core.GetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveAttrib")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES31.All* type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES31.ActiveAttribType*)type, (StringBuilder)name);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveAttrib")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufsize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES31.All[] type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = type)
                {
                    Core.GetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.ActiveAttribType*)type_ptr, (StringBuilder)name);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveAttrib")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES31.All type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = &type)
                {
                    Core.GetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.ActiveAttribType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveAttrib")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES31.All* type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES31.ActiveAttribType*)type, (StringBuilder)name);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniform")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufsize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES31.All[] type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = type)
                {
                    Core.GetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.ActiveUniformType*)type_ptr, (StringBuilder)name);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniform")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES31.All type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = &type)
                {
                    Core.GetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.ActiveUniformType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniform")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES31.All* type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES31.ActiveUniformType*)type, (StringBuilder)name);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniform")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufsize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES31.All[] type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = type)
                {
                    Core.GetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.ActiveUniformType*)type_ptr, (StringBuilder)name);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniform")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES31.All type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = &type)
                {
                    Core.GetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.ActiveUniformType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniform")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES31.All* type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES31.ActiveUniformType*)type, (StringBuilder)name);
            #if DEBUG
            }
            #endif
        }

        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static string GetActiveUniform(int program, int uniformIndex, out int size, out All type)
        {
            ActiveUniformType t;
	    string str = GetActiveUniform(program, uniformIndex, out size, out t);

	    type = (All)(int) t;

            return str;
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetAttribLocation")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        Int32 GetAttribLocation(Int32 program, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.GetAttribLocation((UInt32)program, name.ToString ());
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetAttribLocation")]
        public static 
        Int32 GetAttribLocation(UInt32 program, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.GetAttribLocation((UInt32)program, name.ToString ());
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBooleanv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBoolean(OpenTK.Graphics.ES31.All pname, [OutAttribute] bool[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* @params_ptr = @params)
                {
                    Core.GetBooleanv((OpenTK.Graphics.ES31.GetPName)pname, (bool*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBooleanv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBoolean(OpenTK.Graphics.ES31.All pname, [OutAttribute] out bool @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* @params_ptr = &@params)
                {
                    Core.GetBooleanv((OpenTK.Graphics.ES31.GetPName)pname, (bool*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBooleanv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetBoolean(OpenTK.Graphics.ES31.All pname, [OutAttribute] bool* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetBooleanv((OpenTK.Graphics.ES31.GetPName)pname, (bool*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetBufferParameteriv((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetBufferParameteriv((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetBufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetBufferParameteriv((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetFloatv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetFloat(OpenTK.Graphics.ES31.All pname, [OutAttribute] Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Core.GetFloatv((OpenTK.Graphics.ES31.GetPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetFloatv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetFloat(OpenTK.Graphics.ES31.All pname, [OutAttribute] out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Core.GetFloatv((OpenTK.Graphics.ES31.GetPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetFloatv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetFloat(OpenTK.Graphics.ES31.All pname, [OutAttribute] Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetFloatv((OpenTK.Graphics.ES31.GetPName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetFramebufferAttachmentParameteriv((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferSlot)attachment, (OpenTK.Graphics.ES31.FramebufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetFramebufferAttachmentParameteriv((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferSlot)attachment, (OpenTK.Graphics.ES31.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetFramebufferAttachmentParameteriv((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferSlot)attachment, (OpenTK.Graphics.ES31.FramebufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetIntegerv((OpenTK.Graphics.ES31.GetPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetIntegerv((OpenTK.Graphics.ES31.GetPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetInteger(OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetIntegerv((OpenTK.Graphics.ES31.GetPName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetProgramiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetProgram(Int32 program, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetProgramiv((UInt32)program, (OpenTK.Graphics.ES31.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetProgramiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetProgram(Int32 program, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetProgramiv((UInt32)program, (OpenTK.Graphics.ES31.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetProgramiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetProgramiv((UInt32)program, (OpenTK.Graphics.ES31.ProgramParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetProgramiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetProgram(UInt32 program, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetProgramiv((UInt32)program, (OpenTK.Graphics.ES31.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetProgramiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetProgram(UInt32 program, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetProgramiv((UInt32)program, (OpenTK.Graphics.ES31.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetProgramiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetProgramiv((UInt32)program, (OpenTK.Graphics.ES31.ProgramParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetRenderbufferParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetRenderbufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetRenderbufferParameteriv((OpenTK.Graphics.ES31.RenderbufferTarget)target, (OpenTK.Graphics.ES31.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetRenderbufferParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetRenderbufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetRenderbufferParameteriv((OpenTK.Graphics.ES31.RenderbufferTarget)target, (OpenTK.Graphics.ES31.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetRenderbufferParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetRenderbufferParameteriv((OpenTK.Graphics.ES31.RenderbufferTarget)target, (OpenTK.Graphics.ES31.RenderbufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetShader(Int32 shader, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetShaderiv((UInt32)shader, (OpenTK.Graphics.ES31.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetShader(Int32 shader, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetShaderiv((UInt32)shader, (OpenTK.Graphics.ES31.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetShader(Int32 shader, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetShaderiv((UInt32)shader, (OpenTK.Graphics.ES31.ShaderParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetShader(UInt32 shader, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetShaderiv((UInt32)shader, (OpenTK.Graphics.ES31.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetShader(UInt32 shader, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetShaderiv((UInt32)shader, (OpenTK.Graphics.ES31.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetShaderiv((UInt32)shader, (OpenTK.Graphics.ES31.ShaderParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderPrecisionFormat")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetShaderPrecisionFormat(OpenTK.Graphics.ES31.All shadertype, OpenTK.Graphics.ES31.All precisiontype, [OutAttribute] Int32[] range, [OutAttribute] Int32[] precision)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* range_ptr = range)
                fixed (Int32* precision_ptr = precision)
                {
                    Core.GetShaderPrecisionFormat((OpenTK.Graphics.ES31.ShaderType)shadertype, (OpenTK.Graphics.ES31.ShaderPrecision)precisiontype, (Int32*)range_ptr, (Int32*)precision_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderPrecisionFormat")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetShaderPrecisionFormat(OpenTK.Graphics.ES31.All shadertype, OpenTK.Graphics.ES31.All precisiontype, [OutAttribute] out Int32 range, [OutAttribute] out Int32 precision)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* range_ptr = &range)
                fixed (Int32* precision_ptr = &precision)
                {
                    Core.GetShaderPrecisionFormat((OpenTK.Graphics.ES31.ShaderType)shadertype, (OpenTK.Graphics.ES31.ShaderPrecision)precisiontype, (Int32*)range_ptr, (Int32*)precision_ptr);
                    range = *range_ptr;
                    precision = *precision_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetShaderPrecisionFormat")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES31.All shadertype, OpenTK.Graphics.ES31.All precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetShaderPrecisionFormat((OpenTK.Graphics.ES31.ShaderType)shadertype, (OpenTK.Graphics.ES31.ShaderPrecision)precisiontype, (Int32*)range, (Int32*)precision);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetString")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe System.String GetString(OpenTK.Graphics.ES31.All name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe { return new string((sbyte*)Core.GetString((OpenTK.Graphics.ES31.StringName)name)); }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTexParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetTexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Core.GetTexParameterfv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTexParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetTexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Core.GetTexParameterfv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTexParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetTexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetTexParameterfv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.GetTextureParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTexParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetTexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetTexParameteriv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTexParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetTexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetTexParameteriv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTexParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetTexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetTexParameteriv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.GetTextureParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetUniformLocation")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        Int32 GetUniformLocation(Int32 program, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.GetUniformLocation((UInt32)program, name.ToString());
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetUniformLocation")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        Int32 GetUniformLocation(UInt32 program, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.GetUniformLocation((UInt32)program, name.ToString());
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Core.GetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Core.GetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Core.GetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Core.GetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.GetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T2)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glHint")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void Hint(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.Hint((OpenTK.Graphics.ES31.HintTarget)target, (OpenTK.Graphics.ES31.HintMode)mode);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glIsEnabled")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        bool IsEnabled(OpenTK.Graphics.ES31.All cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.IsEnabled((OpenTK.Graphics.ES31.EnableCap)cap);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glPixelStorei")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void PixelStore(OpenTK.Graphics.ES31.All pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.PixelStorei((OpenTK.Graphics.ES31.PixelStoreParameter)pname, (Int32)param);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glReadPixels")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glReadPixels")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.ReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glReadPixels")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.ReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glReadPixels")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.ReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glReadPixels")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.ReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T6)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glRenderbufferStorage")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void RenderbufferStorage(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.RenderbufferStorage((OpenTK.Graphics.ES31.RenderbufferTarget)target, (OpenTK.Graphics.ES31.RenderbufferInternalFormat)internalformat, (Int32)width, (Int32)height);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary(Int32 n, Int32[] shaders, OpenTK.Graphics.ES31.All binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, Int32[] shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, Int32[] shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, Int32[] shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, Int32[] shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T3)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary(Int32 n, ref Int32 shaders, OpenTK.Graphics.ES31.All binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, ref Int32 shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, ref Int32 shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, ref Int32 shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, ref Int32 shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T3)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary(Int32 n, Int32* shaders, OpenTK.Graphics.ES31.All binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary<T3>(Int32 n, Int32* shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary<T3>(Int32 n, Int32* shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary<T3>(Int32 n, Int32* shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary<T3>(Int32 n, Int32* shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                binary = (T3)binary_ptr.Target;
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary(Int32 n, UInt32[] shaders, OpenTK.Graphics.ES31.All binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, UInt32[] shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, UInt32[] shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, UInt32[] shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, UInt32[] shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T3)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary(Int32 n, ref UInt32 shaders, OpenTK.Graphics.ES31.All binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, ref UInt32 shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, ref UInt32 shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, ref UInt32 shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ShaderBinary<T3>(Int32 n, ref UInt32 shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Core.ShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T3)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary(Int32 n, UInt32* shaders, OpenTK.Graphics.ES31.All binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
            #if DEBUG
            }
            #endif
        }
		
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary<T3>(Int32 n, UInt32* shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary<T3>(Int32 n, UInt32* shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary<T3>(Int32 n, UInt32* shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glShaderBinary")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ShaderBinary<T3>(Int32 n, UInt32* shaders, OpenTK.Graphics.ES31.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Core.ShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES31.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                binary = (T3)binary_ptr.Target;
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glStencilFunc")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void StencilFunc(OpenTK.Graphics.ES31.All func, Int32 @ref, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.StencilFunc((OpenTK.Graphics.ES31.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glStencilFunc")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void StencilFunc(OpenTK.Graphics.ES31.All func, Int32 @ref, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.StencilFunc((OpenTK.Graphics.ES31.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glStencilFuncSeparate")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void StencilFuncSeparate(OpenTK.Graphics.ES31.All face, OpenTK.Graphics.ES31.All func, Int32 @ref, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.StencilFuncSeparate((OpenTK.Graphics.ES31.CullFaceMode)face, (OpenTK.Graphics.ES31.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glStencilFuncSeparate")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void StencilFuncSeparate(OpenTK.Graphics.ES31.All face, OpenTK.Graphics.ES31.All func, Int32 @ref, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.StencilFuncSeparate((OpenTK.Graphics.ES31.CullFaceMode)face, (OpenTK.Graphics.ES31.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glStencilMaskSeparate")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void StencilMaskSeparate(OpenTK.Graphics.ES31.All face, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.StencilMaskSeparate((OpenTK.Graphics.ES31.CullFaceMode)face, (UInt32)mask);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glStencilMaskSeparate")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void StencilMaskSeparate(OpenTK.Graphics.ES31.All face, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.StencilMaskSeparate((OpenTK.Graphics.ES31.CullFaceMode)face, (UInt32)mask);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glStencilOp")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void StencilOp(OpenTK.Graphics.ES31.All fail, OpenTK.Graphics.ES31.All zfail, OpenTK.Graphics.ES31.All zpass)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.StencilOp((OpenTK.Graphics.ES31.StencilOp)fail, (OpenTK.Graphics.ES31.StencilOp)zfail, (OpenTK.Graphics.ES31.StencilOp)zpass);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glStencilOpSeparate")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void StencilOpSeparate(OpenTK.Graphics.ES31.All face, OpenTK.Graphics.ES31.All fail, OpenTK.Graphics.ES31.All zfail, OpenTK.Graphics.ES31.All zpass)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.StencilOpSeparate((OpenTK.Graphics.ES31.CullFaceMode)face, (OpenTK.Graphics.ES31.StencilOp)fail, (OpenTK.Graphics.ES31.StencilOp)zfail, (OpenTK.Graphics.ES31.StencilOp)zpass);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage2D(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ES31.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T8)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexParameterf")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexParameterf((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.TextureParameterName)pname, (Single)param);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Core.TexParameterfv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.TextureParameterName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void TexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexParameterfv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.TextureParameterName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexParameteri")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexParameteri((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.TextureParameterName)pname, (Int32)param);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.TexParameteriv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void TexParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexParameteriv((OpenTK.Graphics.ES31.TextureTarget)target, (OpenTK.Graphics.ES31.TextureParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage2D(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage2D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexSubImage2D((OpenTK.Graphics.ES31.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T8)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer(Int32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, IntPtr ptr)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer<T5>(Int32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
            }
            finally
            {
                ptr_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer<T5>(Int32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
            }
            finally
            {
                ptr_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer<T5>(Int32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
            }
            finally
            {
                ptr_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer<T5>(Int32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                ptr = (T5)ptr_ptr.Target;
            }
            finally
            {
                ptr_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer(UInt32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, IntPtr ptr)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer<T5>(UInt32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
            }
            finally
            {
                ptr_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer<T5>(UInt32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
            }
            finally
            {
                ptr_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer<T5>(UInt32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
            }
            finally
            {
                ptr_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribPointer<T5>(UInt32 indx, Int32 size, OpenTK.Graphics.ES31.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                ptr = (T5)ptr_ptr.Target;
            }
            finally
            {
                ptr_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        void GetInteger64(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] Int64[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        void GetInteger64(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] out Int64 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        unsafe void GetInteger64(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] Int64* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        void GetInteger64(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] Int64[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        void GetInteger64(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] out Int64 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        unsafe void GetInteger64(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] Int64* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteri64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        void GetBufferParameteri64(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int64[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Core.GetBufferParameteri64v((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int64*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteri64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        void GetBufferParameteri64(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int64 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Core.GetBufferParameteri64v((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteri64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        unsafe void GetBufferParameteri64(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int64* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetBufferParameteri64v((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int64*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetStringi")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        unsafe System.String GetString(OpenTK.Graphics.ES31.All name, Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe { return new string((sbyte*)Core.GetStringi((OpenTK.Graphics.ES31.StringNameIndexed)name, (UInt32)index)); }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetStringi")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        unsafe System.String GetString(OpenTK.Graphics.ES31.All name, UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe { return new string((sbyte*)Core.GetStringi((OpenTK.Graphics.ES31.StringNameIndexed)name, (UInt32)index)); }
            #if DEBUG
            }
            #endif
        }

	/* ES 3.1 */

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBeginQuery")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BeginQuery(OpenTK.Graphics.ES31.All target, Int32 id)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BeginQuery((OpenTK.Graphics.ES31.QueryTarget)target, (UInt32)id);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBeginQuery")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BeginQuery(OpenTK.Graphics.ES31.All target, UInt32 id)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BeginQuery((OpenTK.Graphics.ES31.QueryTarget)target, (UInt32)id);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBeginTransformFeedback")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BeginTransformFeedback(OpenTK.Graphics.ES31.All primitiveMode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BeginTransformFeedback((OpenTK.Graphics.ES31.TransformFeedbackPrimitiveType)primitiveMode);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindBufferBase")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindBufferBase(OpenTK.Graphics.ES31.All target, Int32 index, Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindBufferBase((OpenTK.Graphics.ES31.BufferRangeTarget)target, (UInt32)index, (UInt32)buffer);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindBufferBase")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindBufferBase(OpenTK.Graphics.ES31.All target, UInt32 index, UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindBufferBase((OpenTK.Graphics.ES31.BufferRangeTarget)target, (UInt32)index, (UInt32)buffer);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindBufferRange")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindBufferRange(OpenTK.Graphics.ES31.All target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindBufferRange((OpenTK.Graphics.ES31.BufferRangeTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindBufferRange")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindBufferRange(OpenTK.Graphics.ES31.All target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindBufferRange((OpenTK.Graphics.ES31.BufferRangeTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindTransformFeedback")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindTransformFeedback(OpenTK.Graphics.ES31.All target, Int32 id)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindTransformFeedback((OpenTK.Graphics.ES31.TransformFeedbackTarget)target, (UInt32)id);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBindTransformFeedback")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BindTransformFeedback(OpenTK.Graphics.ES31.All target, UInt32 id)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BindTransformFeedback((OpenTK.Graphics.ES31.TransformFeedbackTarget)target, (UInt32)id);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBlitFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Int32 mask, OpenTK.Graphics.ES31.All filter)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BlitFramebuffer((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.ES31.ClearBufferMask)mask, (OpenTK.Graphics.ES31.BlitFramebufferFilter)filter);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glBlitFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, UInt32 mask, OpenTK.Graphics.ES31.All filter)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.BlitFramebuffer((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.ES31.ClearBufferMask)mask, (OpenTK.Graphics.ES31.BlitFramebufferFilter)filter);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferfi")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, Single depth, Int32 stencil)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ClearBufferfi((OpenTK.Graphics.ES31.ClearBufferCombined)buffer, (Int32)drawbuffer, (Single)depth, (Int32)stencil);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Core.ClearBufferfv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Core.ClearBufferfv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ClearBufferfv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, Int32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Core.ClearBufferiv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, ref Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Core.ClearBufferiv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, Int32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ClearBufferiv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, UInt32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Core.ClearBufferuiv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, ref UInt32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Core.ClearBufferuiv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glClearBufferuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void ClearBuffer(OpenTK.Graphics.ES31.All buffer, Int32 drawbuffer, UInt32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ClearBufferuiv((OpenTK.Graphics.ES31.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage3D(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CompressedTexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (OpenTK.Graphics.ES31.CompressedInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage3D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (OpenTK.Graphics.ES31.CompressedInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage3D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (OpenTK.Graphics.ES31.CompressedInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage3D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (OpenTK.Graphics.ES31.CompressedInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexImage3D<T8>(OpenTK.Graphics.ES31.All target, Int32 level, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (OpenTK.Graphics.ES31.CompressedInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T8)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage3D(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CompressedTexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.CompressedInternalFormat)format, (Int32)imageSize, (IntPtr)data);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.CompressedInternalFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.CompressedInternalFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.CompressedInternalFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCompressedTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Core.CompressedTexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.CompressedInternalFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                data = (T10)data_ptr.Target;
            }
            finally
            {
                data_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCopyBufferSubData")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CopyBufferSubData(OpenTK.Graphics.ES31.All readTarget, OpenTK.Graphics.ES31.All writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CopyBufferSubData((OpenTK.Graphics.ES31.BufferTarget)readTarget, (OpenTK.Graphics.ES31.BufferTarget)writeTarget, (IntPtr)readOffset, (IntPtr)writeOffset, (IntPtr)size);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glCopyTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void CopyTexSubImage3D(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.CopyTexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawArraysInstanced")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawArraysInstanced(OpenTK.Graphics.ES31.All mode, Int32 first, Int32 count, Int32 instanceCount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.DrawArraysInstanced((OpenTK.Graphics.ES31.PrimitiveType)mode, (Int32)first, (Int32)count, (Int32)instanceCount);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawBuffers")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawBuffers(Int32 n, OpenTK.Graphics.ES31.All[] bufs)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (OpenTK.Graphics.ES31.All* bufs_ptr = bufs)
                {
                    Core.DrawBuffers((Int32)n, (OpenTK.Graphics.ES31.DrawBufferMode*)bufs_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawBuffers")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES31.All bufs)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (OpenTK.Graphics.ES31.All* bufs_ptr = &bufs)
                {
                    Core.DrawBuffers((Int32)n, (OpenTK.Graphics.ES31.DrawBufferMode*)bufs_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawBuffers")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES31.All* bufs)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.DrawBuffers((Int32)n, (OpenTK.Graphics.ES31.DrawBufferMode*)bufs);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElementsInstanced(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, IntPtr indices, Int32 instanceCount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.DrawElementsInstanced((OpenTK.Graphics.ES31.PrimitiveType)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices, (Int32)instanceCount);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElementsInstanced<T3>(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T3[] indices, Int32 instanceCount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawElementsInstanced((OpenTK.Graphics.ES31.PrimitiveType)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)instanceCount);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElementsInstanced<T3>(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 instanceCount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawElementsInstanced((OpenTK.Graphics.ES31.PrimitiveType)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)instanceCount);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElementsInstanced<T3>(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instanceCount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawElementsInstanced((OpenTK.Graphics.ES31.PrimitiveType)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)instanceCount);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawElementsInstanced<T3>(OpenTK.Graphics.ES31.All mode, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 instanceCount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawElementsInstanced((OpenTK.Graphics.ES31.PrimitiveType)mode, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)instanceCount);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements(OpenTK.Graphics.ES31.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES31.All type, IntPtr indices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements<T5>(OpenTK.Graphics.ES31.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements<T5>(OpenTK.Graphics.ES31.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements<T5>(OpenTK.Graphics.ES31.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements<T5>(OpenTK.Graphics.ES31.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements(OpenTK.Graphics.ES31.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES31.All type, IntPtr indices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements<T5>(OpenTK.Graphics.ES31.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements<T5>(OpenTK.Graphics.ES31.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements<T5>(OpenTK.Graphics.ES31.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glDrawRangeElements")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void DrawRangeElements<T5>(OpenTK.Graphics.ES31.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Core.DrawRangeElements((OpenTK.Graphics.ES31.PrimitiveType)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.ES31.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                indices = (T5)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glEndQuery")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void EndQuery(OpenTK.Graphics.ES31.All target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.EndQuery((OpenTK.Graphics.ES31.QueryTarget)target);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFenceSync")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        IntPtr FenceSync(OpenTK.Graphics.ES31.All condition, Int32 flags)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.FenceSync((OpenTK.Graphics.ES31.SyncCondition)condition, (WaitSyncFlags)flags);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFenceSync")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        IntPtr FenceSync(OpenTK.Graphics.ES31.All condition, UInt32 flags)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.FenceSync((OpenTK.Graphics.ES31.SyncCondition)condition, (WaitSyncFlags)flags);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFlushMappedBufferRange")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void FlushMappedBufferRange(OpenTK.Graphics.ES31.All target, IntPtr offset, IntPtr length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.FlushMappedBufferRange((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)offset, (IntPtr)length);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFramebufferTextureLayer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void FramebufferTextureLayer(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, Int32 texture, Int32 level, Int32 layer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.FramebufferTextureLayer((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glFramebufferTextureLayer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void FramebufferTextureLayer(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All attachment, UInt32 texture, Int32 level, Int32 layer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.FramebufferTextureLayer((OpenTK.Graphics.ES31.FramebufferTarget)target, (OpenTK.Graphics.ES31.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.ES31.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.ES31.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.ES31.ActiveUniformBlockParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.ES31.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.ES31.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.ES31.ActiveUniformBlockParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniforms(Int32 program, Int32 uniformCount, [OutAttribute] Int32[] uniformIndices, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = uniformIndices)
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.ES31.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniforms(Int32 program, Int32 uniformCount, [OutAttribute] out Int32 uniformIndices, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = &uniformIndices)
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.ES31.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    uniformIndices = *uniformIndices_ptr;
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, [OutAttribute] Int32* uniformIndices, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (OpenTK.Graphics.ES31.ActiveUniformParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, [OutAttribute] UInt32[] uniformIndices, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = uniformIndices)
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.ES31.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, [OutAttribute] out UInt32 uniformIndices, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = &uniformIndices)
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.ES31.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    uniformIndices = *uniformIndices_ptr;
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, [OutAttribute] UInt32* uniformIndices, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (OpenTK.Graphics.ES31.ActiveUniformParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteri64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int64[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Core.GetBufferParameteri64v((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int64*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteri64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int64 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Core.GetBufferParameteri64v((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferParameteri64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetBufferParameter(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int64* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetBufferParameteri64v((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferParameterName)pname, (Int64*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferPointer(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] IntPtr @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetBufferPointerv((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferPointer)pname, (IntPtr)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferPointer<T2>(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Core.GetBufferPointerv((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferPointer<T2>(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Core.GetBufferPointerv((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferPointer<T2>(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Core.GetBufferPointerv((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
            }
            finally
            {
                @params_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetBufferPointerv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetBufferPointer<T2>(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Core.GetBufferPointerv((OpenTK.Graphics.ES31.BufferTarget)target, (OpenTK.Graphics.ES31.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                @params = (T2)@params_ptr.Target;
            }
            finally
            {
                @params_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] Int64[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] out Int64 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetInteger(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] Int64* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] Int64[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] out Int64 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64i_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetInteger(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] Int64* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetInteger64i_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int64*)data);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger64(OpenTK.Graphics.ES31.All pname, [OutAttribute] Int64[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Core.GetInteger64v((OpenTK.Graphics.ES31.GetPName)pname, (Int64*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger64(OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int64 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Core.GetInteger64v((OpenTK.Graphics.ES31.GetPName)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInteger64v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetInteger64(OpenTK.Graphics.ES31.All pname, [OutAttribute] Int64* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetInteger64v((OpenTK.Graphics.ES31.GetPName)pname, (Int64*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegeri_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] Int32[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Core.GetIntegeri_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegeri_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] out Int32 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Core.GetIntegeri_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegeri_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetInteger(OpenTK.Graphics.ES31.All target, Int32 index, [OutAttribute] Int32* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetIntegeri_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int32*)data);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegeri_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] Int32[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Core.GetIntegeri_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegeri_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInteger(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] out Int32 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Core.GetIntegeri_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetIntegeri_v")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetInteger(OpenTK.Graphics.ES31.All target, UInt32 index, [OutAttribute] Int32* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetIntegeri_v((OpenTK.Graphics.ES31.GetIndexedPName)target, (UInt32)index, (Int32*)data);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInternalformativ")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInternalformat(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All internalformat, OpenTK.Graphics.ES31.All pname, Int32 bufSize, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetInternalformativ((OpenTK.Graphics.ES31.ImageTarget)target, (OpenTK.Graphics.ES31.SizedInternalFormat)internalformat, (OpenTK.Graphics.ES31.InternalFormatParameter)pname, (Int32)bufSize, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInternalformativ")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetInternalformat(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All internalformat, OpenTK.Graphics.ES31.All pname, Int32 bufSize, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetInternalformativ((OpenTK.Graphics.ES31.ImageTarget)target, (OpenTK.Graphics.ES31.SizedInternalFormat)internalformat, (OpenTK.Graphics.ES31.InternalFormatParameter)pname, (Int32)bufSize, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetInternalformativ")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetInternalformat(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All internalformat, OpenTK.Graphics.ES31.All pname, Int32 bufSize, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetInternalformativ((OpenTK.Graphics.ES31.ImageTarget)target, (OpenTK.Graphics.ES31.SizedInternalFormat)internalformat, (OpenTK.Graphics.ES31.InternalFormatParameter)pname, (Int32)bufSize, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetQuery(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetQueryiv((OpenTK.Graphics.ES31.QueryTarget)target, (OpenTK.Graphics.ES31.GetQueryParam)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetQuery(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetQueryiv((OpenTK.Graphics.ES31.QueryTarget)target, (OpenTK.Graphics.ES31.GetQueryParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetQuery(OpenTK.Graphics.ES31.All target, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetQueryiv((OpenTK.Graphics.ES31.QueryTarget)target, (OpenTK.Graphics.ES31.GetQueryParam)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryObjectuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetQueryObject(Int32 id, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.ES31.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryObjectuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetQueryObject(Int32 id, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.ES31.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryObjectuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.ES31.GetQueryObjectParam)pname, (UInt32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryObjectuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetQueryObject(UInt32 id, OpenTK.Graphics.ES31.All pname, [OutAttribute] UInt32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Core.GetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.ES31.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryObjectuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetQueryObject(UInt32 id, OpenTK.Graphics.ES31.All pname, [OutAttribute] out UInt32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Core.GetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.ES31.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetQueryObjectuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES31.All pname, [OutAttribute] UInt32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.ES31.GetQueryObjectParam)pname, (UInt32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Core.GetSamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Core.GetSamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetSamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Core.GetSamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Core.GetSamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetSamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetSamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetSamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetSamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetSamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetSamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetSamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetStringi")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe String GetString(OpenTK.Graphics.ES31.StringName name, Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe { return new string((sbyte*)Core.GetStringi((OpenTK.Graphics.ES31.StringNameIndexed)name, (UInt32)index)); }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetStringi")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe String GetString(OpenTK.Graphics.ES31.StringName name, UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe { return new string((sbyte*)Core.GetStringi((OpenTK.Graphics.ES31.StringNameIndexed)name, (UInt32)index)); }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSynciv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSync(IntPtr sync, OpenTK.Graphics.ES31.All pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* values_ptr = values)
                {
                    Core.GetSynciv((IntPtr)sync, (OpenTK.Graphics.ES31.SyncParameterName)pname, (Int32)bufSize, (Int32*)length_ptr, (Int32*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSynciv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetSync(IntPtr sync, OpenTK.Graphics.ES31.All pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* values_ptr = &values)
                {
                    Core.GetSynciv((IntPtr)sync, (OpenTK.Graphics.ES31.SyncParameterName)pname, (Int32)bufSize, (Int32*)length_ptr, (Int32*)values_ptr);
                    length = *length_ptr;
                    values = *values_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetSynciv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES31.All pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetSynciv((IntPtr)sync, (OpenTK.Graphics.ES31.SyncParameterName)pname, (Int32)bufSize, (Int32*)length, (Int32*)values);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTransformFeedbackVarying")]
	[Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES31.All[] type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = type)
                {
                    Core.GetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.TransformFeedbackType*)type_ptr, (StringBuilder)name);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTransformFeedbackVarying")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES31.All type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = &type)
                {
                    Core.GetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.TransformFeedbackType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTransformFeedbackVarying")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES31.All* type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES31.TransformFeedbackType*)type, (StringBuilder)name);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTransformFeedbackVarying")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES31.All[] type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = type)
                {
                    Core.GetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.TransformFeedbackType*)type_ptr, (StringBuilder)name);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTransformFeedbackVarying")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES31.All type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ES31.All* type_ptr = &type)
                {
                    Core.GetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES31.TransformFeedbackType*)type_ptr, (StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetTransformFeedbackVarying")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES31.All* type, [OutAttribute] StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES31.TransformFeedbackType*)type, (StringBuilder)name);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Core.GetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Core.GetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] UInt32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Core.GetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (UInt32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] out UInt32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Core.GetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glGetVertexAttribIuiv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES31.All pname, [OutAttribute] UInt32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.GetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.ES31.VertexAttribParameter)pname, (UInt32*)@params);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glInvalidateFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void InvalidateFramebuffer(OpenTK.Graphics.ES31.All target, Int32 numAttachments, OpenTK.Graphics.ES31.All[] attachments)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (OpenTK.Graphics.ES31.All* attachments_ptr = attachments)
                {
                    Core.InvalidateFramebuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (Int32)numAttachments, (OpenTK.Graphics.ES31.FramebufferAttachment*)attachments_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glInvalidateFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void InvalidateFramebuffer(OpenTK.Graphics.ES31.All target, Int32 numAttachments, ref OpenTK.Graphics.ES31.All attachments)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (OpenTK.Graphics.ES31.All* attachments_ptr = &attachments)
                {
                    Core.InvalidateFramebuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (Int32)numAttachments, (OpenTK.Graphics.ES31.FramebufferAttachment*)attachments_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glInvalidateFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void InvalidateFramebuffer(OpenTK.Graphics.ES31.All target, Int32 numAttachments, OpenTK.Graphics.ES31.All* attachments)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.InvalidateFramebuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (Int32)numAttachments, (OpenTK.Graphics.ES31.FramebufferAttachment*)attachments);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glInvalidateSubFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void InvalidateSubFramebuffer(OpenTK.Graphics.ES31.All target, Int32 numAttachments, OpenTK.Graphics.ES31.All[] attachments, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (OpenTK.Graphics.ES31.All* attachments_ptr = attachments)
                {
                    Core.InvalidateSubFramebuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (Int32)numAttachments, (OpenTK.Graphics.ES31.FramebufferAttachment*)attachments_ptr, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glInvalidateSubFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void InvalidateSubFramebuffer(OpenTK.Graphics.ES31.All target, Int32 numAttachments, ref OpenTK.Graphics.ES31.All attachments, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (OpenTK.Graphics.ES31.All* attachments_ptr = &attachments)
                {
                    Core.InvalidateSubFramebuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (Int32)numAttachments, (OpenTK.Graphics.ES31.FramebufferAttachment*)attachments_ptr, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glInvalidateSubFramebuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void InvalidateSubFramebuffer(OpenTK.Graphics.ES31.All target, Int32 numAttachments, OpenTK.Graphics.ES31.All* attachments, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.InvalidateSubFramebuffer((OpenTK.Graphics.ES31.FramebufferTarget)target, (Int32)numAttachments, (OpenTK.Graphics.ES31.FramebufferAttachment*)attachments, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glMapBufferRange")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe IntPtr MapBufferRange(OpenTK.Graphics.ES31.All target, IntPtr offset, IntPtr length, Int32 access)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.MapBufferRange((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)offset, (IntPtr)length, (BufferAccessMask)access);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glMapBufferRange")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe IntPtr MapBufferRange(OpenTK.Graphics.ES31.All target, IntPtr offset, IntPtr length, UInt32 access)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.MapBufferRange((OpenTK.Graphics.ES31.BufferTarget)target, (IntPtr)offset, (IntPtr)length, (BufferAccessMask)access);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glProgramParameteri")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ProgramParameter(Int32 program, OpenTK.Graphics.ES31.All pname, Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ProgramParameteri((UInt32)program, (OpenTK.Graphics.ES31.ProgramParameterName)pname, (Int32)value);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glProgramParameteri")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ProgramParameter(UInt32 program, OpenTK.Graphics.ES31.All pname, Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ProgramParameteri((UInt32)program, (OpenTK.Graphics.ES31.ProgramParameterName)pname, (Int32)value);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glReadBuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void ReadBuffer(OpenTK.Graphics.ES31.All mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.ReadBuffer((OpenTK.Graphics.ES31.ReadBufferMode)mode);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glRenderbufferStorageMultisample")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void RenderbufferStorageMultisample(OpenTK.Graphics.ES31.All target, Int32 samples, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.RenderbufferStorageMultisample((OpenTK.Graphics.ES31.RenderbufferTarget)target, (Int32)samples, (OpenTK.Graphics.ES31.RenderbufferInternalFormat)internalformat, (Int32)width, (Int32)height);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameterf")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.SamplerParameterf((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single)param);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameterf")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.SamplerParameterf((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single)param);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, Single[] param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* param_ptr = param)
                {
                    Core.SamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)param_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, Single* param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.SamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)param);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, Single[] param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* param_ptr = param)
                {
                    Core.SamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)param_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameterfv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, Single* param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.SamplerParameterfv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Single*)param);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameteri")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.SamplerParameteri((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32)param);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameteri")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.SamplerParameteri((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32)param);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, Int32[] param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* param_ptr = param)
                {
                    Core.SamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)param_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES31.All pname, Int32* param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.SamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)param);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, Int32[] param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* param_ptr = param)
                {
                    Core.SamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)param_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glSamplerParameteriv")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES31.All pname, Int32* param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.SamplerParameteriv((UInt32)sampler, (OpenTK.Graphics.ES31.SamplerParameterName)pname, (Int32*)param);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage3D(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (TextureComponentCount)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage3D<T9>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (TextureComponentCount)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage3D<T9>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (TextureComponentCount)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage3D<T9>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (TextureComponentCount)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexImage3D<T9>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (TextureComponentCount)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T9)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexStorage2D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexStorage2D(OpenTK.Graphics.ES31.All target, Int32 levels, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexStorage2D((OpenTK.Graphics.ES31.TextureTarget2D)target, (Int32)levels, (OpenTK.Graphics.ES31.SizedInternalFormat)internalformat, (Int32)width, (Int32)height);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexStorage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexStorage3D(OpenTK.Graphics.ES31.All target, Int32 levels, OpenTK.Graphics.ES31.All internalformat, Int32 width, Int32 height, Int32 depth)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexStorage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)levels, (OpenTK.Graphics.ES31.SizedInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage3D(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage3D<T10>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage3D<T10>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage3D<T10>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTexSubImage3D")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TexSubImage3D<T10>(OpenTK.Graphics.ES31.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES31.All format, OpenTK.Graphics.ES31.All type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Core.TexSubImage3D((OpenTK.Graphics.ES31.TextureTarget3D)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.ES31.PixelFormat)format, (OpenTK.Graphics.ES31.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                pixels = (T10)pixels_ptr.Target;
            }
            finally
            {
                pixels_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTransformFeedbackVaryings")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void TransformFeedbackVaryings(Int32 program, Int32 count, String varyings, OpenTK.Graphics.ES31.All bufferMode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TransformFeedbackVaryings((UInt32)program, (Int32)count, (String)varyings, (OpenTK.Graphics.ES31.TransformFeedbackMode)bufferMode);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glTransformFeedbackVaryings")]
        public static 
        void TransformFeedbackVaryings(UInt32 program, Int32 count, String varyings, OpenTK.Graphics.ES31.All bufferMode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.TransformFeedbackVaryings((UInt32)program, (Int32)count, (String)varyings, (OpenTK.Graphics.ES31.TransformFeedbackMode)bufferMode);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glUnmapBuffer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        bool UnmapBuffer(OpenTK.Graphics.ES31.All target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Core.UnmapBuffer((OpenTK.Graphics.ES31.BufferTarget)target);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer);
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T4)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glVertexAttribIPointer")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static 
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES31.All type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Core.VertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.ES31.VertexAttribIntegerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                pointer = (T4)pointer_ptr.Target;
            }
            finally
            {
                pointer_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glMemoryBarrier")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        void MemoryBarrier(Int32 barriers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.MemoryBarrier((OpenTK.Graphics.ES31.MemoryBarrierMask)barriers);
            #if DEBUG
            }
            #endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "3.1", Version = "3.1", EntryPoint = "glMemoryBarrier")]
        [Obsolete ("Use the overload with strongly typed enumerations")]
        public static
        void MemoryBarrier(UInt32 barriers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Core.MemoryBarrier((OpenTK.Graphics.ES31.MemoryBarrierMask)barriers);
            #if DEBUG
            }
            #endif
        }
    }
}
